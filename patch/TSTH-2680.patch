Index: DSM-2591/DSM-2591.py
===================================================================
--- DSM-2591/DSM-2591.py	(revision 0)
+++ DSM-2591/DSM-2591.py	(working copy)
@@ -0,0 +1,16 @@
+#!/usr/bin/python
+
+
+import sys, os
+sys.path.insert(0, os.path.join(os.environ['NODE_MNTPT'], 'Engine'))
+sys.path.insert(0, os.path.join(os.environ['NODE_MNTPT'], 'test-cases'))
+
+import lib
+from lib.workflowLib import RunSuite
+
+class EarlyAccess(RunSuite):
+    pass
+
+if __name__ == '__main__':
+    print "License = ", os.environ['LICENSE']
+    EarlyAccess().run()
\ No newline at end of file
Index: DSM-2591/DSM-2591.py.conf
===================================================================
--- DSM-2591/DSM-2591.py.conf	(revision 0)
+++ DSM-2591/DSM-2591.py.conf	(working copy)
@@ -0,0 +1,5 @@
+[FIXED]
+SINGLE_RUN = 1
+N_RUN = 1
+
+POLICY = auto_2
\ No newline at end of file
Index: DSM-2591/Install_win_agent.py
===================================================================
--- DSM-2591/Install_win_agent.py	(revision 0)
+++ DSM-2591/Install_win_agent.py	(working copy)
@@ -0,0 +1,93 @@
+import unittest, time, re, sys, os
+from time import sleep
+sys.path.insert(0, os.path.join(os.environ['NODE_MNTPT'], 'test-cases'))
+from gui.server_modules import *
+
+class Install_win_agent(unittest.TestCase):
+    def __init__(self, testname=None, values=None):
+        super(Install_win_agent, self).__init__(testname)
+        self.values = values
+
+    def test_Install_win_agent(self):
+        os.environ.update(self.values)
+
+        try:
+            USER_NAME = os.environ['USER_NAME']
+            PASSWORD = os.environ['PASSWORD']
+            SERVER_NAME = os.environ['AGENT_HOSTNAME'].split('.')[0]
+            SS = os.environ['HOST']
+            BUILD_VERSION = os.environ['BUILD_VERSION']
+            BUILD_NUMBER = os.environ['BUILD_NUMBER']
+        except KeyError as e:
+            print "[FAIL] failed to  get environment veriable %s" % e
+            sys.exit(1)
+
+        VAQA_PATH = '/home/bv/vaqa/Engine/bin'
+        CONFIG_PATH = '/home/bv/vaqa/config'
+
+
+        SED_CMD = 'sed "s/^server.*$/server=' + SS + '/g" GLOBAL.conf > \
+                   GLOBAL.conf.NEW; mv -f GLOBAL.conf.new GLOBAL.conf'
+
+        INSTALL_SCRIPT = "/cygdrive/c/Python27/python.exe ./run buildValidation/install.bat"
+        INSTALL_CMD = INSTALL_SCRIPT + ' --params "BUILD_VERSION=' + BUILD_VERSION + ';BUILD_NUMBER=' + BUILD_NUMBER + '"'
+        ADD_GP_SCRIPT = "/cygdrive/c/Python27/python.exe ./run buildValidation/dxf_test.py"
+
+        REBOOT_CMD = "/cygdrive/c/Python27/python.exe ./run buildValidation/reboot.bat"
+        WAIT=3600
+
+        # Spawning the ssh to server
+        PROMPT =  USER_NAME + "@" + SERVER_NAME
+        child = setup_ssh_connection(SERVER_NAME, USER_NAME, PASSWORD, PROMPT)
+
+        try:
+            # Expect the normal procedure of CA generation
+            child.sendline(CHANGE_DIR + CONFIG_PATH)
+            child.expect(PROMPT)
+            child.sendline(SED_CMD)
+            child.expect(PROMPT)
+            child.sendline(CHANGE_DIR + VAQA_PATH)
+            child.expect(PROMPT)
+            print "[INFO] running command :: %s"%INSTALL_CMD
+            child.sendline(INSTALL_CMD)
+            child.expect(PROMPT, timeout=WAIT)
+            print child.before
+            s = re.search('PASSED', child.before)
+            if s:
+                print "\n Installation And Registeration PASSED on %s" %SERVER_NAME
+                child.sendline(REBOOT_CMD)
+                child.expect(PROMPT)
+                count=0
+                sleep(5)
+                while True:
+                    if count != 100:
+                        print count
+                        try:
+                            print "trying for connection"
+                            child = setup_ssh_connection(SERVER_NAME, USER_NAME, PASSWORD, PROMPT)
+                            if child != 111:
+                                child.sendline(CHANGE_DIR + VAQA_PATH)
+                                child.expect(PROMPT)
+                                print "Got the connection"
+                                break
+                            sleep(10)
+                        except:
+                            count+= 1
+                            sleep(15)
+                    else:
+                        break
+            else:
+                s = re.search('FAILED', child.before)
+                if s:
+                    print "\n Installation and Registeration FAILED on %s" %SERVER_NAME
+                    print child.before
+                    print "\n\n\n-------------------\n\n"
+                    sys.exit(1)
+            sleep(15)
+
+            child.close()
+        except Exception, msg:
+            print msg
+
+if __name__ == "__main__":
+    unittest.main()

Property changes on: DSM-2591/Install_win_agent.py
___________________________________________________________________
Added: svn:executable
## -0,0 +1 ##
+*
\ No newline at end of property
Index: DSM-2591/Install_win_agent.py.conf
===================================================================
--- DSM-2591/Install_win_agent.py.conf	(revision 0)
+++ DSM-2591/Install_win_agent.py.conf	(working copy)
@@ -0,0 +1,3 @@
+[FIXED]
+SINGLE_RUN = 1
+N_RUN = 1
\ No newline at end of file
Index: DSM-2591/SecureStartGP.py
===================================================================
--- DSM-2591/SecureStartGP.py	(revision 0)
+++ DSM-2591/SecureStartGP.py	(working copy)
@@ -0,0 +1,76 @@
+from selenium.common.exceptions import NoSuchElementException
+import unittest, time, re, os, sys, random
+from gui.constants import *
+from gui.modules import modules
+import lib
+from lib.workflowLib import WebDriver
+from selenium.webdriver.support.wait import WebDriverWait
+
+class SecureStartGP(unittest.TestCase):
+
+    def __init__(self, testname=None, values=None):
+        super(SecureStartGP, self).__init__(testname)
+        self.values = values
+
+    def setUp(self):
+        self.driver = WebDriver().Driver
+
+    def test_addGP_and_secureStartGP(self):
+        os.environ.update(self.values)
+        driver = self.driver
+        mod = modules.common_operations(driver)
+        try:
+            agent_hostname = os.environ['AGENT_HOSTNAME']
+            policy_name = os.environ['POLICY']
+            gp_path = os.environ['GUARD_POINT_PATH']
+        except KeyError as e:
+            print "[FAIL] failed to  get environment veriable %s" % e
+            sys.exit(1)
+
+        if mod.search_host_on_gui(hostname = agent_hostname):
+            count=0
+            time.sleep(5)
+            while True:
+                try:
+                    print "Checking Pushing Status"
+                    if self.is_element_present("xpath",d4_1_push_col):
+                        break
+                    else:
+                        count+= 1
+                        driver.find_element_by_xpath(d4_main_hosts).click()
+                        time.sleep(10)
+                except NoSuchElementException as e:
+                    print "[ERROR] %s" % e
+                    print "[FAIL] Pushing Status is pending"
+                    sys.exit(1)
+                if count == 5:
+                    print "[FAIL] Pushing Status is not Done"
+                    sys.exit(1)
+    
+            try:
+                if mod.add_gp(agent_hostname, gp_path, policy_name, True) == True:
+                    print "[FAIL] added Guardpoint."
+                else:
+                    print "[PASS] failed to add Guardpoint."
+            except NoSuchElementException:
+                print "[PASS] EA is not available for the Guardpoint."
+            except Exception as e:
+                print "[ERROR] %s" % e
+                sys.exit(1)
+        else:
+            print "[FAIL] Host %s not found" % agent_hostname
+            sys.exit(1)
+        
+            
+    def is_element_present(self, how, what):
+        try:
+            self.driver.find_element(by=how, value=what)
+        except NoSuchElementException as e: 
+            return False
+        return True
+
+    def tearDown(self):
+        self.driver.quit()
+
+if __name__ == "__main__":
+    unittest.main()
Index: DSM-2591/SecureStartGP.py.conf
===================================================================
--- DSM-2591/SecureStartGP.py.conf	(revision 0)
+++ DSM-2591/SecureStartGP.py.conf	(working copy)
@@ -0,0 +1,3 @@
+[FIXED]
+SINGLE_RUN = 0
+N_RUN = 1
\ No newline at end of file
Index: DSM-2591/__init.py__
===================================================================
Index: DSM-2591/testlist
===================================================================
--- DSM-2591/testlist	(revision 0)
+++ DSM-2591/testlist	(working copy)
@@ -0,0 +1,7 @@
+../../../../buildValidation/install.py --params "BUILD_VERSION=6.0.2;BUILD_NUMBER=6.0.2.38;AGENT_HOST=sys78007.qa.com;AGENT_USER=root;AGENT_PASSWORD=ssl12345"
+DSM-2591.py --params "GUARD_POINT_PATH=/gp/gp0;AGENT_HOSTNAME=sys78007.qa.com"
+../../../../buildValidation/uninstall.sh --params "AGENT_HOST=sys78007.qa.com;AGENT_USER=root;AGENT_PASSWORD=ssl12345"
+
+Install_win_agent.py --params "BUILD_VERSION=6.0.0;BUILD_NUMBER=6.0.0.85;AGENT_HOSTNAME=sys78115.qa.com;USER_NAME=Administrator;PASSWORD=Ssl12345#"
+DSM-2591.py --params "GUARD_POINT_PATH=C:\gp\gp1\"
+
Index: DSM-2591/workflow.py
===================================================================
--- DSM-2591/workflow.py	(revision 0)
+++ DSM-2591/workflow.py	(working copy)
@@ -0,0 +1,2 @@
+coretest = '../../../../dsm_ha/Login/do_login.py USER_NAME=voradmin, ../../../../dsm_ha/Domains/Switch_Domain.py, SecureStartGP.py'
+
