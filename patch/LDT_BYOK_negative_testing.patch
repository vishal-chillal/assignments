Index: BYOK/LDT_policy_negative_testing.py
===================================================================
--- BYOK/LDT_policy_negative_testing.py	(revision 0)
+++ BYOK/LDT_policy_negative_testing.py	(working copy)
@@ -0,0 +1,96 @@
+# !/usr/bin/python
+"""
+DSM-3198:Create a LDT policy. In the key choice page, should NOT see BYOK key show up in the list.
+"""
+
+import unittest, sys, os
+from selenium.common.exceptions import NoSuchElementException
+
+sys.path.insert(0, os.path.join(os.environ['NODE_MNTPT'], 'Engine'))
+sys.path.insert(0, os.path.join(os.environ['NODE_MNTPT'], 'test-cases'))
+
+from lib.workflowLib import WebDriver
+from dsm.rest import library
+from dsm.rest.library import agentlib, utilitylib
+from dsm.rest.modules.core_modules import random_name
+
+from gui.constants import *
+from gui.modules import modules
+
+#"""
+# This test-case is for testing backup and restore functionality of BYO keys.
+# 1.  Add an asymmetric key. Use it as a wrapper to import BYOK.
+# 2.  Try to create LDT policy and add select BYO key as current as well as transformation key in the policy --should fail
+# 3.  cleanup the DSM
+#"""
+
+class DSM_3198(unittest.TestCase):
+    def __init__(self, testname=None, values=None):
+        super(DSM_3198, self).__init__(testname)
+        self.values = values
+
+    def setUp(self):
+        try:
+            self.user_name = os.environ['USER_NAME']
+            self.password = os.environ['USER_PASS']
+            self.domain = os.environ['DSM_DOMAIN']
+            self.dsm_host = os.environ['SERVER']
+
+        except KeyError as e:
+            print "[ERROR] Unable to find variable :: %s"%e
+            sys.exit(1)
+
+        os.environ.update(self.values)
+        self.driver = WebDriver().Driver
+        self.mod = modules.common_operations(self.driver)
+        self.key_list = []
+        self.policy_list = []
+        self.count = 2
+    def test_LDT_policy_negative_checking(self):
+        try:
+            """ Step 1.  Creating as BYO keys from rest method."""
+            for i in range(self.count):
+                key_list, err, res = self.mod.create_BYOK_key_by_rest(self.user_name, self.password, self.domain)
+                if res:
+                    print"[PASS] Byok key added successfully."
+                else:
+                    print"[FAIL] Failed to add key."
+                    sys.exit(1)
+                self.key_list += key_list
+        except Exception as e:
+            print"[ERROR] Error occured while creating BYOK.\n%s"%e
+            sys.exit(1)
+
+        if not self.mod.login_and_switch_domain(self.user_name, self.password, self.domain):
+            print "[FAIL] Unable to login or switch to domain."
+            sys.exit(1)
+
+        try:
+            """ Step 2.  Creating LDT policy and checking if BYO keys are visible to select or not."""
+            self.policy_name = random_name()
+            if self.mod.create_policy_by_gui(self.policy_name, policy_type = "LDT", key=self.key_list[3], transformation_key=self.key_list[1]):
+                print "[FAIL] Policy is created and keys selected in the policy."
+                sys.exit(1)
+            else:
+                print "[PASS] Unable to create policy and assign key to the policy."
+
+        except Exception as e:
+            print "[ERROR] Error occured while checking BYOK functionality for LDT policy.\n%s" % e
+            sys.exit(1)
+    
+
+    def tearDown(self):
+        """Step 3.  cleaning up the DSM. """
+        if self.policy_name:
+            self.mod.delete_policy_by_gui(self.policy_name)
+
+        if self.key_list:
+            if self.mod.del_asymmetric_agent_key(self.key_list):
+                print "[INFO] Keys deleted successfully."
+            else:
+                print "[INFO] Deletion of key failed."
+                
+        self.driver.quit()
+            
+if __name__ == "__main__":
+    unittest.main()
Index: modules/modules.py
===================================================================
--- modules/modules.py	(revision 70404)
+++ modules/modules.py	(working copy)
@@ -947,44 +947,57 @@
             self.select_effect(3)
             time.sleep(tout2)
 
-    def select_key(self, val, resource = "", flag = 0):
+    def select_key(self, val, resource = "", flag = 0, ldt_flag = False, select_and_exit_flag = True):
         """
         Select key in "Key Selection Rules"
         ==> resource - if given, select resource in key selection rule
         ==> flag - if set, select resource
+        ==> ldt_flag - set if the key is Transformation key
+        ==> select_and_exit_flag - set if need to select and add key to the policy.
+        Returns 1 if failed
         """
+        try:
+            if not ldt_flag:
+                self.wait_till_element_available(d9_1_1_add_key_bt).click()
+            if flag == 1:
+                self.wait_till_element_available(d9_1_1_2_resouce_select).click()
+                time.sleep(2)
+                ret = self.search_and_select(d9_1_1_1_entity_name_col, \
+                                             d9_1_1_1_entity_chkbox_col, resource,flag=1)
+                if ret != 0:
+                    print "\n Failed to select '%s' Resource set"%resource
+                    return 1
+                self.wait_till_element_available(d9_1_1_1_select_entity_bt).click()
+            if not ldt_flag:
+                self.wait_till_element_available(d9_1_1_2_key_select).click()
 
-        driver = self.driver
+            else:
+                self.wait_till_element_available(d9_1_1_2_transform_key_select).click()
+            self.wait_till_element_available(d9_1_1_2_key_search_tb).clear()
+            self.wait_till_element_available(d9_1_1_2_key_search_tb).send_keys(val)
+            self.wait_till_element_available(d9_1_1_2_key_go_bt).click()
+            key_select_radio_btn = self.wait_till_element_available(d9_1_1_2_key_radio % val)
+            try:
+                key_select_radio_btn.click()
+            except:
+                print "\n Failed to select Key %s in Key Selection Rule" %val
+                return 1
 
-        driver.find_element_by_xpath(d9_1_1_add_key_bt).click()
-        time.sleep(tout2)
-        if flag == 1:
-            driver.find_element_by_xpath(d9_1_1_2_resouce_select).click()
-            time.sleep(tout2)
-            ret = self.search_and_select(d9_1_1_1_entity_name_col, \
-                    d9_1_1_1_entity_chkbox_col, resource,flag=1)
-            if ret != 0:
-                print "\n Failed to select '%s' Resource set"%resource
+            self.wait_till_element_available(d9_1_1_2_select_key_bt).click()
+            if select_and_exit_flag or ldt_flag:
+                self.wait_till_element_available(d9_1_1_2_ok_bt).click()
+
+            try:
+                response = self.wait_till_element_available(c2_1_2_response, wait_condition = "visible", wait_time = 5)
+                print "[INFO] Response of the select key is :: %s" % response.text
                 return 1
-            time.sleep(tout2)
-            driver.find_element_by_xpath(d9_1_1_1_select_entity_bt).click()
-
-        driver.find_element_by_xpath(d9_1_1_2_key_select).click()
-        time.sleep(tout2)
-        driver.find_element_by_xpath(d9_1_1_2_key_search_tb).clear()
-        driver.find_element_by_xpath(d9_1_1_2_key_search_tb).send_keys(val)
-        time.sleep(tout2)
-        driver.find_element_by_xpath(d9_1_1_2_key_go_bt).click()
-        time.sleep(tout2)
-        ret = self.search_and_select(d9_1_1_2_key_name_col, \
-               d9_1_1_2_key_chkbox_col, val, flag=1)
-        if ret != 0:
-            print "\n Failed to select Key %s in Key Selection Rule" %val
+            except Exception as e:
+                pass
+                
+            
+        except Exception as e:
+            print "[ERROR] Error occured while selecting key for policy.\n%s" % e
             return 1
-        time.sleep(tout2)
-        driver.find_element_by_xpath(d9_1_1_2_select_key_bt).click()
-        time.sleep(tout2)
-        driver.find_element_by_xpath(d9_1_1_2_ok_bt).click()
 
     def select_user(self, val):
         """
@@ -1710,7 +1723,7 @@
 
     #------------------------- KEYS ----------------------#
 
-    def import_keys(self, export_file_path,  key_list = []):
+    def import_keys(self, export_file_path,  key_list = [], dsm_host = os.environ['HOST']):
         """
         this function takes
         1. path of file which is to be import.
@@ -1719,7 +1732,6 @@
 
         driver = self.driver
         self.refresh_page()
-        dsm_host = os.environ['HOST']
         time.sleep(5)
         self.select_nested_element(d6_keys,
                     d6_agent_keys,
@@ -1787,7 +1799,7 @@
             print "[ERROR] Error occoured while clicking on the key [%s].\n%s" % (key_name, e)
             return False
 
-    def export_keys(self, key_list = []):
+    def export_keys(self, key_list = [], dsm_host = os.environ["HOST"], file_type=".dat"):
         """
         this function takes key_list and export path
         select all keys given in the list and after exporting
@@ -1796,8 +1808,7 @@
         driver = self.driver
         exported_keys_file = ''
         try:
-            dsm_host = os.environ["HOST"]
-            self.ssh_and_clear_reports(val=dsm_host, type=".dat")
+            self.ssh_and_clear_reports(val=dsm_host,  type = file_type)
             self.refresh_page()
             time.sleep(5)
             self.select_nested_element(
@@ -1816,7 +1827,7 @@
             driver.find_element_by_xpath(d6_1_3_2_ok).click()
             time.sleep(tout2)
             exported_keys_file = '%s_keys' %dsm_host
-            self.ssh_and_copy_reports(val=exported_keys_file, type=".dat")
+            self.ssh_and_copy_reports(val=exported_keys_file, type = file_type)
             #get export keys file
             for file in os.listdir("/tmp"):
                 if file.find(exported_keys_file)!=-1:
@@ -2666,10 +2677,11 @@
 
     def fill_policy(self, policy_type="Standard"):
         driver = self.driver
-        ddl = "//span[@class='cgucformfield']//select"
         try:
-            policy_ddl = driver.find_element_by_xpath(ddl)
+            policy_ddl = driver.find_element_by_xpath(d9_policy_select_type)
             if policy_ddl.is_displayed():
+                if policy_type != "Standard":
+                    policy_type = "Live Data Transformation"
                 Select(policy_ddl).select_by_visible_text(policy_type)
                 time.sleep(tout2)
         except Exception as msg:
@@ -3274,34 +3286,55 @@
     def create_policy_by_gui(self, policy_name = "",
                              policy_type = "Standard",
                              key="", resource="",
-                             flag=""):
+                             flag="", transformation_key = ""):
+        """
+        policy_name and policy_type for creating basic policy
+        key ==> if add key to the policy while policy creation
+        resource ==> select resourse in policy creation.
+        flag ==> set if adding resources
+        transformation_key ==>  value of key which can be added to transformation key in LDT policy.
+
+        return True or False
+        """
         if policy_name == "":
             print "No Policy Given"
             return False
 
-        driver = self.driver
-        if policy_type == "Standard":
-            self.refresh_page()
-            driver.find_element_by_xpath(d9_policies).click()
-            driver.find_element_by_xpath(d9_add_online).click()
-            time.sleep(tout2)
+        self.refresh_page()
+        try:
+
+
+
+            self.wait_till_element_available(d9_policies).click()
+            self.wait_till_element_available(d9_add_online).click()
             self.fill_policy(policy_type)
-            time.sleep(tout2)
-            driver.find_element_by_xpath(d9_1_1_name_tb).clear()
-            driver.find_element_by_xpath(d9_1_1_name_tb).send_keys(policy_name)
+            self.wait_till_element_available(d9_1_1_name_tb).clear()
+            self.wait_till_element_available(d9_1_1_name_tb).send_keys(policy_name)
             if key:
-                self.select_key(val, resource, flag)
-            driver.find_element_by_xpath(d9_1_1_ok_bt).click()
-            time.sleep(tout2)
-        #Online Policy part will be implemented in near future
+                if self.select_key(key, resource, flag, select_and_exit_flag=False) != 1:
+                    print "[INFO] Current key %s is selected for policy." % key
+                else:
+                    print "[INFO] Failed to assign Current key to the policy."
+            if transformation_key:
+                if self.select_key(transformation_key, resource, flag, ldt_flag=True, select_and_exit_flag=False) != 1:
+                    print "[INFO] Transformation key %s is selected for policy." % key
+                else:
+                    print "[INFO] Failed to assign Transformation key to the policy."
+                    
+            self.wait_till_element_available(d9_1_1_ok_bt).click()
 
-        driver.find_element_by_xpath(d9_policies).click()
-        driver.find_element_by_xpath(d9_1_name_tb).clear()
-        driver.find_element_by_xpath(d9_1_name_tb).send_keys(policy_name)
-        driver.find_element_by_xpath(d9_1_go_bt).click()
-        time.sleep(1)
+        except Exception as e:
+            print "[ERROR] Error occured while creating policy by gui.\n%s" % e
+            return False
         try:
-            driver.find_element_by_xpath("//span[text()='%s']"%policy_name)
+            response = self.wait_till_element_available(c2_1_2_response, wait_condition = "visible")
+            print "[INFO] Response of the select key is :: %s" % response.text
+            return False
+        except Exception as e:
+            pass
+            
+        try:
+            self.wait_till_element_available("//span[text()='%s']"%policy_name)
             return True
         except:
             print "Policy [%s] Not Created through GUI"%policy_name
Index: constants.py
===================================================================
--- constants.py	(revision 70404)
+++ constants.py	(working copy)
@@ -2560,8 +2560,9 @@
 #d9_1_1_2 Policies -> Manage policies -> manage policies -> add online policy
 # -> add key rule
 d9_1_1_2_resouce_select = "//label[text()='Resource']/../..//input[@type='submit']"
-d9_1_1_2_key_select = "//label[text()='Key']/../..//input[@type='submit']"
-d9_1_1_2_transform_key_select = "//table/tbody/tr[3]/td[2]/span/span//table/tbody/tr[1]/td[2]/div/input"
+d9_1_1_2_key_select = "//label[contains(text(),'Key')]/../..//input[@type='submit']"
+#d9_1_1_2_transform_key_select = "//table/tbody/tr[3]/td[2]/span/span//table/tbody/tr[1]/td[2]/div/input"
+d9_1_1_2_transform_key_select = "//label[contains(text(),'Transformation Key')]/../..//input[@type='submit']"
 d9_1_1_2_cancel_bt= "//div[contains(@class, 'cgucformbuttonpane')]/ul/li[1]/input"
 d9_1_1_2_ok_bt= "//input[@value='Ok']"
 d9_1_1_2_apply_bt= "//input[@value='Apply']"
@@ -2572,6 +2573,7 @@
 d9_1_1_2_key_go_bt = "//input[@value='Go']"
 d9_1_1_2_key_name_col = "table>tbody>tr>td:nth-last-child(4)>a>span"
 d9_1_1_2_key_chkbox_col = "table>tbody>tr>td>input"
+d9_1_1_2_key_radio = "//a/span[text()='%s']/../../..//input"
 d9_1_1_2_select_key_bt = "//input[@value='Select Key']"
 d9_1_1_2_cancel_key_bt = "//input[@value='Cancel']"
 
Index: Keys/Agent/import_with_wrong_wrapper.py.conf
===================================================================
--- Keys/Agent/import_with_wrong_wrapper.py.conf	(revision 70404)
+++ Keys/Agent/import_with_wrong_wrapper.py.conf	(working copy)
@@ -1,23 +1,7 @@
 [FIXED]
 SINGLE_RUN=1
 
-#"""
-# This test is for testing keys import with wrong wrapper key: should be denied
-
-# Test case do the following things:
-
-# 1. Generate wrapper key and Export several asymmetric keys.
-
-# 2. Generate wrapper key again and attempt to import the asymmetric keys back to the same domain.(must FAIL)
-
-# 3. Import another un-related wrapper key shares and attempt to import the asymmetric key back to the same domain.(must FAIL)
-
-#"""
-
 KEY_NAME = Agent_key
-DSM_USER_NAME = voradmin
-DSM_DOMAIN = domain1
-DSM_PASSWORD = Ssl12345#
 KEY_COUNT = 5
 
 #For Agent->Export                                                                                                                     
Index: Keys/Agent/import_with_wrong_wrapper.py
===================================================================
--- Keys/Agent/import_with_wrong_wrapper.py	(revision 70404)
+++ Keys/Agent/import_with_wrong_wrapper.py	(working copy)
@@ -1,3 +1,5 @@
+# !/usr/bin/python
+
 from selenium.common.exceptions import NoSuchElementException
 import unittest, time, sys, os
 
@@ -8,67 +10,66 @@
 from gui.modules import modules
 from lib.workflowLib import WebDriver
 
+#"""
+# This test is for testing keys import with wrong wrapper key: should be denied
+# 1. Generate wrapper key and Export several asymmetric keys.
+# 2. Generate wrapper key again and attempt to import the asymmetric keys back to the same domain.(must FAIL)
+# 3. Import another un-related wrapper key shares and attempt to import the asymmetric key back to the same domain.(must FAIL)
+#"""
+
 class Import_keys_with_wrong_wrapper(unittest.TestCase):
     def __init__(self, testname=None, values=None):
         super(Import_keys_with_wrong_wrapper, self).__init__(testname)
         self.values = values
 
     def setUp(self):
-        self.web = WebDriver()
-        self.driver = self.web.Driver
-
-    def test_import_keys_with_wrong_wrapper(self):
         os.environ.update(self.values)
-        driver = self.driver
-        mod = modules.common_operations(driver)
+        self.driver = WebDriver().Driver
+        self.mod = modules.common_operations(self.driver)
+        self.key_list = []
         try:
-            key = os.environ['KEY_NAME']
-            user_name = os.environ['DSM_USER_NAME']
-            password = os.environ['DSM_PASSWORD']
-            domain_name = os.environ['DSM_DOMAIN']
-            key_count = int(os.environ['KEY_COUNT'])
-            key_export_path = os.environ['KEY_EXPORT_FILE_PATH']
-            dsm_host = os.environ['DSM_SERVER']
-            server_user_name = os.environ['SERVER_USER_NAME']
-            wrapper_key_share = os.environ['WRAPPER_KEY_SHARE']
+            self.key = os.environ['KEY_NAME']
+            self.user_name = os.environ['USER_NAME']
+            self.password = os.environ['USER_PASS']
+            self.domain_name = os.environ['DSM_DOMAIN']
+            self.key_count = int(os.environ['KEY_COUNT'])
+            self.dsm_host = os.environ['DSM_SERVER']
+            self.server_user_name = os.environ['SERVER_USER_NAME']
+            self.wrapper_key_share = os.environ['WRAPPER_KEY_SHARE']
         except KeyError as e:
             print "[ERROR] unable to find veriable..\n error :: %s"%e
             sys.exit(1)
 
-        """ Login And Switch Domain function call"""
-        try:
-            mod.login_this_user(user_name, password)
-            time.sleep(5)
-            
-            if mod.is_element_present("xpath", login_tb):
-                print "[FAIL] failed to login due to wrong credentials."
-                sys.exit(1)
-            else:
-                print "[PASS] login successful."
-            time.sleep(1)
-            mod.switch_domain(domain_name)
-        
-        except NoSuchElementException as e:
-            print "[FAIL] unable to login or switch to domain."
-            print "[ERROR] %s"%e
+    def test_import_keys_with_wrong_wrapper(self):
+
+        if not self.mod.login_and_switch_domain(self.user_name, self.password, self.domain_name):
+            print "[FAIL] Unable to login or switch to domain."
             sys.exit(1)
 
         try:
-            """ clearing the backup folder first. """
-            mod.ssh_and_clear_reports(val=dsm_host, type=".dat")
+            for i in range(self.key_count):
+                key_name = self.key + "_" + str(i)
+                if not self.mod.create_symmetric_agent_key(key_name):
+                    print "[FAIL] Failed to add symmetric public key."
+                    sys.exit(1)
+                else:
+                    self.key_list.append(key_name)
 
+            print "[PASS] Symmetric key is added successfully with key rotation feature, the functionality is passed."
+
+
             """ creating wrapper key. """
-            if not mod.generate_wrapper_key():
+            if not self.mod.generate_wrapper_key():
                 print "[FAIL] generation of wrapper key is failed."
                 sys.exit(1)
 
-            """ generating key_list to export. """
-            key_list = map(lambda x:key + "_" + str(x),range(key_count))
-            if mod.export_keys(key_list,key_export_path):
+            self.key_export_file_path = self.mod.export_keys(self.key_list)
+            if self.key_export_file_path:
                 print "[PASS] Keys are exported successfully!!"
             else:
-                print "[FAIL] failed to export Keys."
+                print "[FAIL] Failed to export Keys."
                 sys.exit(1)
+
         except Exception as e:
             print "[ERROR] unable export keys\nError: %s"%e
             sys.exit(1)
@@ -76,47 +77,43 @@
 
         try:
             """ creating wrapper key again. """
-            if not mod.generate_wrapper_key():
+            if not self.mod.generate_wrapper_key():
                 print "[FAIL] generation of wrapper key is failed."
                 sys.exit(1)
 
-            key_export_file_path = ""
-            files = os.listdir("/tmp")
-            for file in files:
-                if file.find(dsm_host) != -1:
-                    key_export_file_path = "/home/" + server_user_name + "/Downloads/%s"%file
-                    break
-            if not key_export_file_path:
-                print "[FAIL] file not found for import keys."
-                sys.exit(1)
-
             """ importing keys back to the domain."""
-            if mod.import_keys(key_export_file_path, key_list) == False:
+            if self.mod.import_keys(self.key_export_file_path, self.key_list) == False:
                 print "[PASS] keys are not imported due to change of wrapper key."
             else:
                 print "[FAIL] keys are imported successfully, after creating new wrapper key"
                 sys.exit(1)
             
             """ importing wrapper key share """
-            if mod.add_key_share([wrapper_key_share]) == True:
+            if self.mod.add_key_share([self.wrapper_key_share]) == True:
                 print "[PASS] successfully added un-related wrapper key share.!!"
             else:
-                print "[FAIL] failed to add wrapper key share."
+                print "[FAIL] Failed to add wrapper key share."
                 sys.exit(1)
             
             """ importing keys back to the domain."""
-            if mod.import_keys(key_export_file_path, key_list) == False:
+            if self.mod.import_keys(self.key_export_file_path, self.key_list) == False:
                 print "[PASS] keys are not imported due to change of wrapper key."
             else:
                 print "[FAIL] keys are imported successfully, after importing different key share"
                 sys.exit(1)
 
         except Exception as e:
-            print "[FAIL] negative testing of import keys failed due to exception."
+            print "[FAIL] Negative testing of import keys failed due to exception."
             print "[ERROR] Error: %s"%e
             sys.exit(1)
 
     def tearDown(self):
+        if self.key_list:
+            if self.mod.del_asymmetric_agent_key(self.key_list):
+                print "[INFO] Keys deleted successfully."
+            else:
+                print "[INFO] Deletion of key failed."
+                
         self.driver.quit()
 
 
